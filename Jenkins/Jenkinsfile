pipeline {
    environment {
        customerImage   = ''
        productImage    = ''
        storeImage      = ''
        databaseImage   = ''
        
        customermicroservice    = 'customer-server-593-594-606-607:latest'
        productmicroservice     = 'products-server-593-594-606-607:latest'
        storemicroservice       = 'store-server-593-594-606-607:latest'
        databasemicroservice    = 'database-server-593-594-606-607:latest'
        
        // dockerhubuser = 'varunchandrashekar1'
        // dockerhubuser = 'varunkamathcs594'
        dockerhubuser = 'rockerbot'
        
        DOCKERHUB_CREDENTIALS = credentials('rockerbot')
        // DOCKER_HOST = 'unix:///var/run/docker.sock'  // For Linux/Mac
        // DOCKER_HOST = 'tcp://host.docker.internal:2375'  // For Windows
    }

    agent any

    stages {
        stage("testing stageJenkins"){
            steps {
                echo 'jenkins running'
            }
        }
        stage('Checkout Source') {
            steps {
                git branch: 'main', url: 'https://github.com/Vaarun-Kamath/E-Commerce-Microservices.git'
                echo "git clone completed"
                sh 'dir'
            }
        }
        stage('Docker Login') {
           steps {
               echo 'Logon in to docker hub'
               sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin docker.io'
               echo 'Login Successfull'
           }
       }
        stage('client izer') {
            steps {
                dir('client') {
                    script {
                        sh 'dir'
                        sh 'ls'
                        // sh 'npm i'
                        // sh 'npm run build'
                    }
                }
            }
        }
        stage('Build Images') {
            steps {
                script{
                    sh 'dir'
                    sh 'ls'
                    
                    // sh "docker build -t ${customermicroservice} --pull --file server/customer/Dockerfile server/customer"
                    sh 'echo "Building Images"'
                    customerImage = docker.build("${dockerhubuser}/${customermicroservice}", "--pull --file server/customer/Dockerfile server/customer")
                    productImage = docker.build("${dockerhubuser}/${productmicroservice}", "--pull --file server/products/Dockerfile server/products")
                    storeImage = docker.build("${dockerhubuser}/${storemicroservice}", "--pull --file server/store/Dockerfile server/store")
                    databaseImage = docker.build("${dockerhubuser}/${databasemicroservice}", "--pull --file server/database/Dockerfile server/database")
                    sh 'echo "Images Built"'
                    
                    // dir('server/customer') {
                    //     script {
                    //         sh 'dir'
                    //         // customerImage = docker.build customermicroservice
                    //         sh "docker build -t ${dockerhubuser}/${customermicroservice} ."
                    //     }
                    // }
                    
                    // dir('server/products') {
                    //     script {
                    //         sh 'dir'
                    //         // productImage = docker.build productmicroservice
                    //         sh "docker build -t ${dockerhubuser}/${productmicroservice} ."
                    //     }
                    // }
                    
                    // dir('server/store') {
                    //     script {
                    //         sh 'dir'
                    //         // storeImage = docker.build storemicroservice
                    //         sh "docker build -t ${dockerhubuser}/${storemicroservice} ."
                    //     }
                    // }
                    
                    // dir('server/database') {
                    //     script {
                    //         sh 'dir'
                    //         // databaseImage = docker.build databasemicroservice
                    //         sh "docker build -t ${dockerhubuser}/${databasemicroservice} ."
                    //     }
                    // }
                }
            }
        }
        stage('Push Images') {
            steps {
                script {
                    sh 'echo "running currently as ${dockerhubuser}"'
                    docker.withRegistry('https://index.docker.io/v1/', dockerhubuser) {
                        customerImage.push()
                        productImage.push()
                        storeImage.push()
                        databaseImage.push()
                    }
                }
                // sh 'echo "$DOCKER_PASSWORD"'
                // sh 'echo "$DOCKER_PASSWORD" | docker login -u varunchandrashekar1 --password-stdin'
                // sh "docker push ${customermicroservice}"
                // sh "docker push ${productmicroservice}"
                // sh "docker push ${storemicroservice}"
                // sh "docker push ${databasemicroservice}"
            }
        }

        stage('kubectl') {
            steps{
                sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'
                sh 'chmod u+x ./kubectl'
            }
        }

        // stage('Deploy kubernetes') {
        //     steps {
        //         sh 'ls'
        //         sh './kubectl apply -f ./k8s/ingress-service.yml'
                
        //     }
        // }
        stage('Deploy Microservices') {
            steps {
                script{
                    echo 'Microservice deployed'
                    // kubernetes.deploy(
                    //     configs: './k8s/customer-server-cluster-ip-service.yml',
                    //     delegate: true,
                    //     enableConfigSubstitution: true
                    // )
                    // kubernetes.deploy(
                    //     configs: './k8s/customer-server-deployment.yml',
                    //     delegate: true,
                    //     enableConfigSubstitution: true
                    // )
                    // kubernetes.deploy(
                    //     configs: './k8s/database-server-cluster-ip-service.yml',
                    //     delegate: true,
                    //     enableConfigSubstitution: true
                    // )
                    // kubernetes.deploy(
                    //     configs: './k8s/database-server-deployment.yml',
                    //     delegate: true,
                    //     enableConfigSubstitution: true
                    // )
                    // kubernetes.deploy(
                    //     configs: './k8s/ingress-service.yml',
                    //     delegate: true,
                    //     enableConfigSubstitution: true
                    // )
                    // kubernetes.deploy(
                    //     configs: './k8s/products-server-cluster-ip-service.yml',
                    //     delegate: true,
                    //     enableConfigSubstitution: true
                    // )
                    // kubernetes.deploy(
                    //     configs: './k8s/products-server-cluster-ip-service.yml',
                    //     delegate: true,
                    //     enableConfigSubstitution: true
                    // )
                    // kubernetes.deploy(
                    //     configs: './k8s/products-server-deployment.yml',
                    //     delegate: true,
                    //     enableConfigSubstitution: true
                    // )
                    // kubernetes.deploy(
                    //     configs: './k8s/store-server-cluster-ip-service.yml',
                    //     delegate: true,
                    //     enableConfigSubstitution: true
                    // )
                    // kubernetes.deploy(
                    //     configs: './k8s/store-server-deployment.yml',
                    //     delegate: true,
                    //     enableConfigSubstitution: true
                    // )
                }
            }
        }
        
        stage('test') {
            steps {
                echo 'run succesfully'
            }
        }
    }
}
